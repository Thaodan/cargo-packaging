# In case x86_64 isn't defined
%if 0%{!?x86_64}
%x86_64 x86_64
%endif

# This avoids a malloc hang in sb2 gated calls to execvp/dup2/chdir
# during fork/exec. It has no effect outside sb2 so doesn't hurt
# native builds.

# When cross-compiling under SB2 rust needs to know what arch to emit
# when nothing is specified on the command line. That usually defaults
# to "whatever rust was built as" but in SB2 rust is accelerated and
# would produce x86 so this is how it knows differently.
#
%_rust_tripple_arch \
    %{_target_cpu}-unknown-%{_target_cpu}%{?_gnu}

# This avoids a malloc hang in sb2 gated calls to execvp/dup2/chdir
# during fork/exec. It has no effect outside sb2 so doesn't hurt
# native builds.
#
%__sb2_base \
    if [ -n $SB2_SESSION_DIR ] ; \
    export SB2_RUST_EXECVP_SHIM="/usr/bin/env LD_PRELOAD=/usr/lib/libsb2/libsb2.so.1 /usr/bin/env"; \
    export SB2_RUST_USE_REAL_EXECVP=Yes; \
    export SB2_RUST_USE_REAL_FN=Yes; \
    fi; 

%build_rustflags -Clink-arg=-Wl,-z,relro,-z,now -C debuginfo=2 -C strip=none
%__cargo %__sb2_base CARGO_INCREMENTAL=0 CARGO_FEATURE_VENDORED=1 RUSTFLAGS="%{?__rustflags} %{?build_rustflags}" %{_bindir}/cargo
%__cargo_common_opts %{?_smp_mflags} \
                     --target %{_rust_tripple_arch}

%rust_arches x86_64 i586 i686 armv6hl armv7hl aarch64 ppc64 powerpc64 ppc64le powerpc64le riscv64 s390x
%rust_tier1_arches x86_64 aarch64

%cargo_build() \
%{shrink:\
    unset LIBSSH2_SYS_USE_PKG_CONFIG && \
    if [ -z "$RUSTC_WRAPPER" ]; then CARGO_AUDITABLE="auditable" ; fi && \
    %{__cargo} $CARGO_AUDITABLE build \
    %{__cargo_common_opts} \
    --offline --release \
    %* \
}

%cargo_test() \
%{shrink:\
    unset LIBSSH2_SYS_USE_PKG_CONFIG && \
    if [ -z "$RUSTC_WRAPPER" ]; then CARGO_AUDITABLE="auditable" ; fi && \
    %{__cargo} $CARGO_AUDITABLE test \
    %{__cargo_common_opts} \
    --offline \
    --no-fail-fast \
    %* \
}

%cargo_install(p:) \
%{shrink:\
    unset LIBSSH2_SYS_USE_PKG_CONFIG && \
    if [ -z "$RUSTC_WRAPPER" ]; then CARGO_AUDITABLE="auditable" ; fi && \
    %{__cargo} $CARGO_AUDITABLE install \
    %{__cargo_common_opts} \
    --offline \
    --no-track \
    --root=%{buildroot}%{_prefix} \
    --path %{-p:%{-p*}}%{!-p:.} \
    %* \
}
